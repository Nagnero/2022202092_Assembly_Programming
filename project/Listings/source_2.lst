


ARM Macro Assembler    Page 1 


    1 00000000                 AREA             code_area, CODE, READONLY
    2 00000000                 ENTRY
    3 00000000         
    4 00000000 00000450 
                       float_number_series
                               EQU              0x0450
    5 00000000 00018AEC 
                       sorted_number_series
                               EQU              0x00018AEC
    6 00000000 00031190 
                       final_result_series
                               EQU              0x00031190
    7 00000000         
    8 00000000         ;========== Do not change this area ===========
    9 00000000         
   10 00000000         initialization
   11 00000000 E59F0140        LDR              r0, =0xDEADBEEF ; seed for rand
                                                            om number
   12 00000004 E3A01E45        LDR              r1, =float_number_series
   13 00000008 E59F213C        LDR              r2, =10000  ; The number of ele
                                                            ment in stored sere
                                                            is
   14 0000000C E59F313C        LDR              r3, =0x0EACBA90 ; constant for 
                                                            random number
   15 00000010         
   16 00000010         save_float_series
   17 00000010 E3520000        CMP              r2, #0
   18 00000014 0A00000F        BEQ              is_init
   19 00000018 EB000003        BL               random_float_number
   20 0000001C E4810004        STR              r0, [r1], #4
   21 00000020 E2422001        SUB              r2, r2, #1
   22 00000024 E3A05000        MOV              r5, #0
   23 00000028 EAFFFFF8        B                save_float_series
   24 0000002C         
   25 0000002C         random_float_number
   26 0000002C E1A0500E        MOV              r5, LR
   27 00000030 E0200003        EOR              r0, r0, r3
   28 00000034 E0203163        EOR              r3, r0, r3, ROR #2
   29 00000038 E1500001        CMP              r0, r1
   30 0000003C AB000001        BLGE             shift_left
   31 00000040 BB000002        BLLT             shift_right
   32 00000044 E12FFF15        BX               r5
   33 00000048         
   34 00000048         shift_left
   35 00000048 E1A00080        LSL              r0, r0, #1
   36 0000004C E12FFF1E        BX               LR
   37 00000050         
   38 00000050         shift_right
   39 00000050 E1A000A0        LSR              r0, r0, #1
   40 00000054 E12FFF1E        BX               LR
   41 00000058         
   42 00000058         ;============================================
   43 00000058         
   44 00000058         ;========== Start your code here ===========
   45 00000058         
   46 00000058         is_init
   47 00000058 E1A00001        MOV              r0, r1      ; r0 is last data a
                                                            ddress
   48 0000005C E3A01E45        LDR              r1, =float_number_series



ARM Macro Assembler    Page 2 


   49 00000060 E2811004        ADD              r1, #4      ; r1 will points la
                                                            st value
   50 00000064         
   51 00000064         outer_loop
   52 00000064 E1500001        CMP              r0, r1      ; check last loop
   53 00000068 0A000035        BEQ              exit
   54 0000006C E3A02E45        LDR              r2, =float_number_series
   55 00000070 E5914000        LDR              r4, [r1]    ; get last data to 
                                                            r4
   56 00000074 EA000001        B                compare_loop ; insert sort
   57 00000078         next_loop
   58 00000078 E2811004        ADD              r1, #4
   59 0000007C EAFFFFF8        B                outer_loop  ; repeat loop
   60 00000080         
   61 00000080         compare_loop                         ; r3 is val1, r4 is
                                                             val2
   62 00000080 E1520001        CMP              r2, r1      ; check loop out
   63 00000084 0AFFFFFB        BEQ              next_loop
   64 00000088 E5923000        LDR              r3, [r2]    ; get first data to
                                                             r3
   65 0000008C E59F50C0        LDR              r5, =sorted_number_series
   66 00000090 E5853000        STR              r3, [r5]    ; get value1 sign b
                                                            it to r6
   67 00000094 E5D56003        LDRB             r6, [r5, #3]
   68 00000098 E3560080        CMP              r6, #0x80
   69 0000009C 23A06001        MOVCS            r6, #1
   70 000000A0 33A06000        MOVCC            r6, #0
   71 000000A4         
   72 000000A4 E5854000        STR              r4, [r5]    ; get value2 sign b
                                                            it to r7
   73 000000A8 E5D57003        LDRB             r7, [r5, #3]
   74 000000AC E3570080        CMP              r7, #0x80
   75 000000B0 23A07001        MOVCS            r7, #1
   76 000000B4 33A07000        MOVCC            r7, #0
   77 000000B8         
   78 000000B8 E1560007        CMP              r6, r7      ; compare sign bit
   79 000000BC CA00001E        BGT              val2_bigger ; if val1 is bigger
                                                            
   80 000000C0 BA000010        BLT              val1_bigger ; if val2 is bigger
                                                            
   81 000000C4         
   82 000000C4 E5853000        STR              r3, [r5]    ; get val1 exponent
                                                             r8
   83 000000C8 E1D580B2        LDRH             r8, [r5, #2]
   84 000000CC E1A08888        LSL              r8, #17
   85 000000D0 E1A08C28        LSR              r8, #24
   86 000000D4         
   87 000000D4 E5854000        STR              r4, [r5]    ;get val2 exponent 
                                                            to r9
   88 000000D8 E1D590B2        LDRH             r9, [r5, #2]
   89 000000DC E1A09889        LSL              r9, #17
   90 000000E0 E1A09C29        LSR              r9, #24
   91 000000E4         
   92 000000E4 E1580009        CMP              r8, r9      ; compare exponent 
                                                            (sign is same)
   93 000000E8 CA000000        BGT              val1_exp_bigger
   94 000000EC BA000002        BLT              val2_exp_bigger
   95 000000F0         
   96 000000F0         ; check mantissa



ARM Macro Assembler    Page 3 


   97 000000F0         
   98 000000F0         val1_exp_bigger
   99 000000F0 E3560001        CMP              r6, #1      ; check sign
  100 000000F4 0A000003        BEQ              val1_bigger ; sign is minus
  101 000000F8 EA00000F        B                val2_bigger ; sign is plus
  102 000000FC         
  103 000000FC         val2_exp_bigger
  104 000000FC E3560001        CMP              r6, #1
  105 00000100 0A000000        BEQ              val1_bigger
  106 00000104 EA00000C        B                val2_bigger
  107 00000108         
  108 00000108         val1_bigger                          ; insert data
  109 00000108 E1A03001        MOV              r3, r1      ; temp addr
  110 0000010C E5934000        LDR              r4, [r3]
  111 00000110 E5925000        LDR              r5, [r2]
  112 00000114 E5824000        STR              r4, [r2]
  113 00000118 E2822004        ADD              r2, #4
  114 0000011C         loop_shift
  115 0000011C E1520003        CMP              r2, r3
  116 00000120 05825000        STREQ            r5, [r2]
  117 00000124 0AFFFFD3        BEQ              next_loop
  118 00000128 E5926000        LDR              r6, [r2]
  119 0000012C E5825000        STR              r5, [r2]
  120 00000130 E1A05006        MOV              r5, r6
  121 00000134 E2822004        ADD              r2, #4
  122 00000138 EAFFFFF7        B                loop_shift
  123 0000013C         
  124 0000013C         val2_bigger                          ; don't switch data
                                                             and compare next l
                                                            oop
  125 0000013C E2822004        ADD              r2, #4
  126 00000140 EAFFFFCE        B                compare_loop
  127 00000144         
  128 00000144         
  129 00000144         exit
  130 00000144 E1A0F00E        MOV              pc, LR
  131 00000148                 END
              DEADBEEF 
              00002710 
              0EACBA90 
              00018AEC 
Command Line: --debug --xref --diag_suppress=9931 --cpu=ARM9E --apcs=interwork 
--depend=.\objects\source_2.d -o.\objects\source_2.o -IC:\Keil_v5\ARM\RV31\INC 
-IC:\Keil_v5\ARM\CMSIS\Include --predefine="__EVAL SETA 1" --predefine="__UVISI
ON_VERSION SETA 529" --list=.\listings\source_2.lst source_2.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

code_area 00000000

Symbol: code_area
   Definitions
      At line 1 in file source_2.s
   Uses
      None
Comment: code_area unused
compare_loop 00000080

Symbol: compare_loop
   Definitions
      At line 61 in file source_2.s
   Uses
      At line 56 in file source_2.s
      At line 126 in file source_2.s

exit 00000144

Symbol: exit
   Definitions
      At line 129 in file source_2.s
   Uses
      At line 53 in file source_2.s
Comment: exit used once
initialization 00000000

Symbol: initialization
   Definitions
      At line 10 in file source_2.s
   Uses
      None
Comment: initialization unused
is_init 00000058

Symbol: is_init
   Definitions
      At line 46 in file source_2.s
   Uses
      At line 18 in file source_2.s
Comment: is_init used once
loop_shift 0000011C

Symbol: loop_shift
   Definitions
      At line 114 in file source_2.s
   Uses
      At line 122 in file source_2.s
Comment: loop_shift used once
next_loop 00000078

Symbol: next_loop
   Definitions
      At line 57 in file source_2.s
   Uses
      At line 63 in file source_2.s
      At line 117 in file source_2.s

outer_loop 00000064



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols


Symbol: outer_loop
   Definitions
      At line 51 in file source_2.s
   Uses
      At line 59 in file source_2.s
Comment: outer_loop used once
random_float_number 0000002C

Symbol: random_float_number
   Definitions
      At line 25 in file source_2.s
   Uses
      At line 19 in file source_2.s
Comment: random_float_number used once
save_float_series 00000010

Symbol: save_float_series
   Definitions
      At line 16 in file source_2.s
   Uses
      At line 23 in file source_2.s
Comment: save_float_series used once
shift_left 00000048

Symbol: shift_left
   Definitions
      At line 34 in file source_2.s
   Uses
      At line 30 in file source_2.s
Comment: shift_left used once
shift_right 00000050

Symbol: shift_right
   Definitions
      At line 38 in file source_2.s
   Uses
      At line 31 in file source_2.s
Comment: shift_right used once
val1_bigger 00000108

Symbol: val1_bigger
   Definitions
      At line 108 in file source_2.s
   Uses
      At line 80 in file source_2.s
      At line 100 in file source_2.s
      At line 105 in file source_2.s

val1_exp_bigger 000000F0

Symbol: val1_exp_bigger
   Definitions
      At line 98 in file source_2.s
   Uses
      At line 93 in file source_2.s
Comment: val1_exp_bigger used once
val2_bigger 0000013C




ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Relocatable symbols

Symbol: val2_bigger
   Definitions
      At line 124 in file source_2.s
   Uses
      At line 79 in file source_2.s
      At line 101 in file source_2.s
      At line 106 in file source_2.s

val2_exp_bigger 000000FC

Symbol: val2_exp_bigger
   Definitions
      At line 103 in file source_2.s
   Uses
      At line 94 in file source_2.s
Comment: val2_exp_bigger used once
16 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

final_result_series 00031190

Symbol: final_result_series
   Definitions
      At line 6 in file source_2.s
   Uses
      None
Comment: final_result_series unused
float_number_series 00000450

Symbol: float_number_series
   Definitions
      At line 4 in file source_2.s
   Uses
      At line 12 in file source_2.s
      At line 48 in file source_2.s
      At line 54 in file source_2.s

sorted_number_series 00018AEC

Symbol: sorted_number_series
   Definitions
      At line 5 in file source_2.s
   Uses
      At line 65 in file source_2.s
Comment: sorted_number_series used once
3 symbols
353 symbols in table
